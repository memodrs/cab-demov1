package com.cab.cardGame;

import com.cab.card.Card;
import com.cab.card.Ids;
import com.cab.cardGame.config.State;
import com.cab.cardGame.config.Trigger;
import com.cab.cardGame.effektCards.fluch.*;
import com.cab.cardGame.effektCards.kreaturen.*;
import com.cab.cardGame.effektCards.segen.*;
import com.cab.cardGame.model.CardState;

public class EffektManager {
	CardGame cardGame;
	public EffektManager(CardGame cardGame) {
		this.cardGame = cardGame;
	}
	
	public CardState getCardForId(int id) {
		Card card = cardGame.gp.cardLoader.getCard(id);
		
		switch (id) {
			  //KREATUREN
			case Ids.ROBOTO:           return new Roboto(          card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.HEXE:             return new Hexe(            card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.effektSelectOponentBoardState);
			case Ids.SENSENMANN:       return new Sensenmann(      card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.effektSelectOponentBoardState);
			case Ids.VAMPIR:           return new Vampir(          card, cardGame, State.boardState,        Trigger.triggerAfterDoAttack,                                               State.ignoreState                  );
			case Ids.WERWOLF:          return new Werwolf(         card, cardGame, State.boardState,        Trigger.triggerAfterDoAttack,                                               State.ignoreState                  );
			case Ids.HARPYIE:          return new Harpyie(         card, cardGame, State.boardState,        Trigger.triggerManualFromHand,                                              State.ignoreState                  );
			case Ids.DAEMON:           return new Daemon(          card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.ZOMBIE:           return new Zombie(          card, cardGame, State.boardState,        Trigger.triggerManualFromGrave,                                             State.ignoreState                  );
			case Ids.CERBERUS:         return new Cerberus(        card, cardGame, State.boardState,        Trigger.triggerOnZerstoertKreaturZerstoert,                                 State.ignoreState                  );
			case Ids.GEFALLENER:       return new Gefallener(      card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.MAGIER:           return new Magier(          card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.effektSelectOponentBoardState);
			case Ids.GORGONE:          return new Gorgone(         card, cardGame, State.boardState,        Trigger.triggerKarteWurdeAngegriffen,                                       State.ignoreState                  );
			case Ids.KAPPA:            return new Kappa(           card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.ignoreState                  );
			case Ids.ASWANG:           return new Aswang(          card, cardGame, State.boardState,        Trigger.triggerAfterDoAttack,                                               State.ignoreState                  );
			case Ids.GESPENST:         return new Gespenst(        card, cardGame, State.boardState,        Trigger.triggerBeforeKarteWirdAngegriffen,                                  State.ignoreState                  );
			case Ids.GHUL:             return new Ghul(            card, cardGame, State.boardState,        Trigger.triggerKarteHatDurchAngriffKarteZerstoert,                          State.ignoreState                  );
			case Ids.FINSTERNIS:       return new Finsternis(      card, cardGame, State.ignoreState,       Trigger.triggerPermanent,                                                   State.ignoreState                  );
			case Ids.HYDRA:            return new Hydra(           card, cardGame, State.boardState,        Trigger.triggerBeforeKarteWirdAngegriffen,                                  State.ignoreState                  );
			case Ids.VODOOPRIESTER:    return new VodooPriester(   card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.effektSelectOponentBoardState);
			case Ids.HOELLENREITER:    return new HoellenReiter(   card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.WOLF_1:           return new Wolf(            card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.WOLF_2:           return new Wolf(            card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.SCHLANGE:         return new Schlange(        card, cardGame, State.boardState,        Trigger.triggerSchadenZugefuegtDurchAngriff,                                State.ignoreState                  );
			case Ids.BIENE:            return new Biene(           card, cardGame, State.boardState,        Trigger.triggerManualFromHand,                                              State.ignoreState                  );
			case Ids.GOTTESANBETERIN:  return new Gottesanbeterin( card, cardGame, State.boardState,        Trigger.triggerAfterDoAttackAngreiferNochAufBoard,                          State.ignoreState                  );
			case Ids.CHAMAELEON:       return new Chamaeleon(      card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.ignoreState                  );
			case Ids.IGEL:             return new Igel(            card, cardGame, State.boardState,        Trigger.triggerKarteWurdeAngegriffenUndAngreiferIstNochAufDemBoard,         State.ignoreState                  );
			case Ids.VOGEL:            return new Vogel(           card, cardGame, State.boardState,        Trigger.triggerManualFromHand,                                              State.ignoreState                  );
			case Ids.KROETE:           return new Kroete(          card, cardGame, State.graveOponentState, Trigger.triggerKarteWurdeDurchKampfZerstoertUndAngreiferIstNochAufDemBoard, State.ignoreState                  );
			case Ids.SCHMETTERLING:    return new Schmetterling(   card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.GORILLA:          return new Gorilla(         card, cardGame, State.boardState,        Trigger.triggerKarteHatDurchAngriffKarteZerstoert,                          State.ignoreState                  );
			case Ids.PFAU:             return new Pfau(            card, cardGame, State.ignoreState,       Trigger.triggerPermanent,                                                   State.ignoreState                  );
			case Ids.HIRSCH:           return new Hirsch(          card, cardGame, State.boardState,        Trigger.triggerManualFromHand,                                              State.ignoreState                  );
			case Ids.QUALLE:           return new Qualle(          card, cardGame, State.boardState,        Trigger.triggerSchadenZugefuegtDurchAngriff,                                State.ignoreState                  );
			case Ids.SCHNECKE:         return new Schnecke(        card, cardGame, State.boardState,        Trigger.triggerOnBoardOponentKreaturAufgerufen,                             State.ignoreState                  );
			case Ids.FISCH:            return new Fisch(           card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.ignoreState                  );
			case Ids.OKTOPUS:          return new Oktopus(         card, cardGame, State.boardState,        Trigger.triggerKarteWurdeDurchKampfZerstoert,                               State.ignoreState                  );
			case Ids.LOEWE:            return new Loewe(           card, cardGame, State.boardState,        Trigger.triggerKarteWurdeAngegriffenUndAngreiferIstNochAufDemBoard,         State.ignoreState                  );
			case Ids.VERFLUCHTER:      return new Verfluchter(     card, cardGame, State.boardState,        Trigger.triggerAfterDestroyed,                                              State.ignoreState                  );
			case Ids.BANSHEE:          return new Banshee(         card, cardGame, State.boardState,        Trigger.triggerManualFromGrave,                                             State.ignoreState                  );
			case Ids.WENDIGO:          return new Wendigo(         card, cardGame, State.boardState,        Trigger.triggerManualFromHand,                                              State.ignoreState                  );
			case Ids.TODESFEE:         return new Todesfee(        card, cardGame, State.boardState,        Trigger.triggerOnZerstoertKreaturZerstoert,                                 State.ignoreState                  );
			case Ids.MIMIKRIE:         return new Mimikrie(        card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.effektSelectOponentBoardState);
			case Ids.TAUBE:            return new Taube(           card, cardGame, State.boardState,        Trigger.triggerKarteWurdeDurchKampfZerstoert,                               State.ignoreState                  );
			case Ids.RATTE:            return new Ratte(           card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.selectOptionCardListState    );
			case Ids.LAMIA:            return new Lamia(           card, cardGame, State.boardState,        Trigger.triggerKarteWurdeAngegriffenUndAngreiferIstNochAufDemBoard,         State.ignoreState                  );
			case Ids.NIX:              return new Nix(             card, cardGame, State.ignoreState,       Trigger.triggerPermanent,                                                   State.ignoreState                  );
			case Ids.MINOTAURUS:       return new Minotaurus(      card, cardGame, State.boardState,        Trigger.triggerKarteHatDurchAngriffKarteZerstoert,                          State.ignoreState                  );
			case Ids.DRACHE:           return new Drache(          card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.effektSelectOponentBoardState);
			case Ids.EINHORN:          return new Einhorn(         card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.FEE:              return new Fee(             card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.ignoreState                  );
			case Ids.DJINN:            return new Djinn(           card, cardGame, State.handCardState,     Trigger.triggerKreaturAufrufen,                                             State.effektSelectOwnGraveState    );
			case Ids.MEERJUNGFRAU:     return new Meerjungfrau(    card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.effektSelectOponentBoardState);
			case Ids.PHOENIX:          return new Phoenix(         card, cardGame, State.handCardState,     Trigger.triggerAfterDestroyed,                                              State.ignoreState                  );
			case Ids.KOBOLD:           return new Kobold(          card, cardGame, State.handCardState,     Trigger.triggerManualFromHand,                                              State.ignoreState                  );
			case Ids.ZYKLOP:           return new Zyklop(          card, cardGame, State.boardState,        Trigger.triggerAngriffSetupAngreifer,                                       State.ignoreState                  );
			case Ids.ZENTAUR:          return new Zentaur(         card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.ignoreState                  );
			case Ids.IRRLICHT:         return new Irrlicht(        card, cardGame, State.graveOponentState, Trigger.triggerAfterDestroyed,                                              State.effektSelectOponentBoardState);
			case Ids.ZWERG:            return new Zwerg(           card, cardGame, State.boardState,        Trigger.triggerManualFromHand,                                              State.ignoreState                  );
			case Ids.ELF:              return new Elf(             card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.effektSelectOponentBoardState);
			case Ids.FEUERTEUFEL:      return new Feuerteufel(     card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.YETI:             return new Yeti(            card, cardGame, State.boardState,        Trigger.triggerManualFromHand,                                              State.ignoreState                  );
			case Ids.SPHYNX:           return new Sphynx(          card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.effektSelectOponentBoardState);
			case Ids.ARMOR:            return new Armor(           card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.effektSelectOponentBoardState);
			case Ids.PEGASUS:          return new Pegasus(         card, cardGame, State.boardState,        Trigger.triggerAfterDoAttack,                                               State.ignoreState                  );
			case Ids.KRAKEN:           return new Kraken(          card, cardGame, State.boardState,        Trigger.triggerKarteWurdeDurchKampfZerstoert,                               State.ignoreState                  );
			case Ids.KLABAUTERMANN:    return new Klabautermann(   card, cardGame, State.boardState,        Trigger.triggerKarteWurdeDurchKampfZerstoert,                               State.ignoreState                  );
			case Ids.SYLPHE:           return new Sylphe(          card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.ignoreState                  );
			case Ids.WALDGEIST:        return new Waldgeist(       card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.GOLEM:            return new Golem(           card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.TENGU:            return new Tengu(           card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.ignoreState                  );
			case Ids.KIRIN:            return new Kirin(           card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.effektSelectOponentBoardState);
			case Ids.KITZUNE:          return new Kitzune(         card, cardGame, State.boardState,        Trigger.triggerKarteWurdeDurchKampfZerstoert,                               State.ignoreState                  );
			case Ids.HUMA:             return new Huma(            card, cardGame, State.boardState,        Trigger.triggerManualFromHand,                                              State.ignoreState                  );
			case Ids.ARZT:             return new Arzt(            card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.effektSelectOwnBoardState    );
			case Ids.JAEGER:           return new Jaeger(          card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.effektSelectOponentBoardState);
			case Ids.PIRAT:            return new Pirat(           card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.RITTER:           return new Ritter(          card, cardGame, State.boardState,        Trigger.triggerBeforeKarteAngreift,                                         State.ignoreState                  );
			case Ids.ASTROLOGE:        return new Astrologe(       card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.ignoreState                  );
			case Ids.WAECHTER:         return new Waechter(        card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.effektSelectOwnBoardState    );
			case Ids.DAEMONENJAEGER:   return new Daemonenjaeger(  card, cardGame, State.ignoreState,       Trigger.triggerPermanent,                                                   State.ignoreState                  );
			case Ids.BUERGERMEISTER:   return new Buergermeister(  card, cardGame, State.boardState,        Trigger.triggerAngriffSetupVerteidiger,                                     State.effektSelectOwnBoardState    );
			case Ids.BAUER:            return new Bauer(           card, cardGame, State.handCardState,     Trigger.triggerOnStartRunde,                                                State.ignoreState                  );
			case Ids.KOENIG:           return new Koenig(          card, cardGame, State.boardState,        Trigger.triggerPermanent,                                                   State.ignoreState                  );
			case Ids.HAENKER:          return new Haenker(         card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.effektSelectOponentBoardState);
			case Ids.HOFNARR:          return new Hofnarr(         card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.selectOptionState            );
			case Ids.HAHN:             return new Hahn(            card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.effektSelectOponentBoardState);
			case Ids.BANDIT:           return new Bandit(          card, cardGame, State.boardState,        Trigger.triggerKarteWurdeDurchKampfZerstoert,                               State.ignoreState                  );
			case Ids.VAGABUND:         return new Vagabund(        card, cardGame, State.handCardState,     Trigger.triggerManualFromBoard,                                             State.ignoreState                  );
			case Ids.GLAEUBIGER:       return new Glaeubiger(      card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.HERRSCHERIN:      return new Herrscherin(     card, cardGame, State.boardState,        Trigger.triggerKarteWurdeDurchKampfZerstoert,                               State.ignoreState                  );
			case Ids.SCHMIED:          return new Schmied(         card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.selectOptionCardListState    );
			case Ids.WITWE:            return new Witwe(           card, cardGame, State.boardState,        Trigger.triggerOnAddKreaturToGrave,                                         State.ignoreState                  );
			case Ids.SCHARMANIN:       return new Scharmanin(      card, cardGame, State.boardState,        Trigger.triggerKarteWurdeDurchKampfZerstoert,                               State.selectOptionCardListState    );
			case Ids.WISSENSCHAFTLER:  return new Wissenschaftler( card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.selectOptionCardListState    );
			case Ids.SCHWEIN:          return new Schwein(         card, cardGame, State.handCardState,     Trigger.triggerManualFromHand,                                              State.ignoreState                  );
			case Ids.DONTEUR:          return new Donteur(         card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.effektSelectOponentBoardState);
			case Ids.GEFANGENER:       return new Gefangener(      card, cardGame, State.boardState,        Trigger.triggerAfterDoAttack,                                               State.ignoreState                  );
			case Ids.BETTLER:          return new Bettler(         card, cardGame, State.boardState,        Trigger.triggerOnWin,                                                       State.ignoreState                  );
			case Ids.FISCHER:          return new Fischer(         card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.effektSelectOponentBoardState);
			case Ids.KATZE:            return new Katze(           card, cardGame, State.graveState,        Trigger.triggerOnHandBeforeDamageDirekterAngriff,                           State.ignoreState                  );
			case Ids.PRINZESSIN:       return new Prinzessin(      card, cardGame, State.handCardState,     Trigger.triggerManualFromHand,                                              State.selectOptionCardListState    );
			case Ids.PHILIOSOPH:       return new Philiosoph(      card, cardGame, State.handCardState,     Trigger.triggerOnStartRunde,                                                State.selectOptionCardListState    );
			case Ids.MUMIE:            return new Mumie(           card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.KOYOTE:           return new Koyote(          card, cardGame, State.boardState,        Trigger.triggerKarteHatDurchAngriffKarteZerstoert,                          State.selectOptionCardListState    );
			case Ids.RABE:             return new Rabe(            card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.VERDORBENE:       return new Verdorbene(      card, cardGame, State.graveState,        Trigger.triggerKarteWurdeDurchKampfZerstoert,                               State.ignoreState                  );
			case Ids.FLEDERMAUS:       return new Fledermaus(      card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.WAHRSAGERIN:      return new Wahrsagerin(     card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.selectOptionState            );
			case Ids.PAPAGEI:          return new Papagei(         card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.VERSTOSSENER:     return new Verstossener(    card, cardGame, State.handCardState,     Trigger.triggerManualFromHand,                                              State.ignoreState                  );
			case Ids.HEILIGERRITTER:   return new HeiligerRitter(  card, cardGame, State.boardState,        Trigger.triggerKarteHatDurchAngriffKarteZerstoert,                          State.ignoreState                  );
			case Ids.PINGUIN:          return new Pinguin(         card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.selectOptionCardListState    );
			case Ids.TOTENBESCHWOERER: return new Totenbeschwoerer(card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.selectOptionCardListState    );
			case Ids.SPIRITUELLE:      return new Spirituelle(     card, cardGame, State.boardState,        Trigger.triggerManualFromBoard,                                             State.selectOptionCardListState    );
			case Ids.HIMMLICHE:        return new Himmliche(       card, cardGame, State.boardState,        Trigger.triggerKreaturAufrufen,                                             State.ignoreState                  );
			case Ids.PUPPE:            return new Puppe(           card, cardGame, State.graveState,        Trigger.triggerOnHandDamageDirekterAngriff,                                 State.ignoreState                  );

			  //SEGEN
			case Ids.SCHWERT:          return new Schwert(            card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.effektSelectOwnBoardState);
			case Ids.BESCHWOERUNG:     return new Beschwoerung(       card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.ignoreState);
			case Ids.AMULETT:          return new Amulett(            card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.effektSelectOwnBoardState);
			case Ids.WANDEL:           return new Wandel(             card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.effektSelectOwnBoardState);
			case Ids.FLUEGEL:          return new Fluegel(            card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.effektSelectOwnBoardState);
			case Ids.SCHILD:           return new Schild(             card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.effektSelectOwnBoardState);
			case Ids.STURMANGRIFF:     return new Sturmangriff(       card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.effektSelectOwnBoardState);
			case Ids.YINGUNDYANG:      return new YingUndYang(        card, cardGame, State.boardState,    Trigger.triggerManualFromHand, State.effektSelectOwnGraveState);
			case Ids.SCHWARM:          return new Schwarm(            card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.selectOptionCardListState);
			case Ids.GNADE:            return new Gnade(              card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.effektSelectOwnGraveState);
			case Ids.QUELLE:           return new Quelle(             card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.ignoreState);
			case Ids.SCHILDUNDSCHWERT: return new SchildUndSchwert(   card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.effektSelectOwnBoardState);
			case Ids.KESSEL:           return new Kessel(             card, cardGame, State.handCardState, Trigger.triggerManualFromHand, State.ignoreState);
			case Ids.FLEISCH:          return new Fleisch(            card, cardGame, State.boardState,    Trigger.triggerManualFromHand, State.ignoreState);
			case Ids.HETZE:            return new Hetze(              card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.ignoreState);
			case Ids.AUFSTIEG:         return new Aufstieg(           card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.effektSelectOwnBoardState);
			case Ids.RUFDERDUNKELHEIT: return new RufDerDunkelheit(   card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.selectOptionCardListState);
			case Ids.HIMMLICHERRUF:    return new HimmlicherRuf(      card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.selectOptionCardListState);
			case Ids.AUFRUFUNG:        return new Aufrufung(          card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.selectOptionCardListState);
			case Ids.HEN:              return new SegenDerSterblichen(card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.selectOptionCardListState);
			case Ids.SEGENDERBESTIEN:  return new SegenDerBestien(    card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.selectOptionCardListState);
			case Ids.SEGENDERFABEL:    return new SegenDerFabel(      card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.selectOptionCardListState);
			case Ids.SEGENDERDUNKLEN:  return new SegenDerDunklen(    card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.selectOptionCardListState);
			case Ids.VERSTAERKUNG:     return new Verstaerkung(       card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.selectOptionCardListState);
			case Ids.VOLLMOND:         return new Vollmond(           card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.selectOptionCardListState);
			case Ids.REGENBOGEN:       return new Regenbogen(         card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.selectOptionCardListState);
			case Ids.SONNENFINSTERNIS: return new Sonnenfinsternis(   card, cardGame, State.boardState,	   Trigger.triggerManualFromHand, State.selectOptionCardListState);

			  //FLUCH
			case Ids.FLASCHE:        return new Flasche(       card, cardGame, State.graveOponentState, Trigger.triggerManualFromHand, State.effektSelectOponentBoardState);
			case Ids.FLUCH:          return new Fluch(         card, cardGame, State.graveOponentState, Trigger.triggerManualFromHand, State.effektSelectOponentBoardState);
			case Ids.FALLE:          return new Falle(         card, cardGame, State.graveOponentState, Trigger.triggerManualFromHand, State.effektSelectOponentBoardState);
			case Ids.STURM:          return new Sturm(         card, cardGame, State.handCardState, 	Trigger.triggerManualFromHand, State.ignoreState);
			case Ids.UEBERSTRAHLUNG: return new Ueberstrahlung(card, cardGame, State.handCardState,     Trigger.triggerManualFromHand, State.ignoreState);
			case Ids.HYPNOSE:        return new Hypnose(       card, cardGame, State.boardState,	 	Trigger.triggerManualFromHand, State.effektSelectOponentBoardState);
			case Ids.GEWITTER:       return new Gewitter(      card, cardGame, State.handCardState, 	Trigger.triggerManualFromHand, State.effektSelectOponentBoardState);
			case Ids.FEUER:          return new Feuer(         card, cardGame, State.handCardState, 	Trigger.triggerManualFromHand, State.effektSelectOponentBoardState);
			case Ids.BRAND:          return new Brand(         card, cardGame, State.handCardState, 	Trigger.triggerManualFromHand, State.ignoreState);
			case Ids.OPFERGABE:      return new Opfergabe(     card, cardGame, State.handCardState, 	Trigger.triggerManualFromHand, State.effektSelectOwnBoardState);
			case Ids.VERLORENESLAND: return new VerlorenesLand(card, cardGame, State.handCardState, 	Trigger.triggerManualFromHand, State.effektSelectOponentBoardState);
			case Ids.KATASTROPHE:    return new Katastrophe(   card, cardGame, State.handCardState, 	Trigger.triggerManualFromHand, State.ignoreState);
			case Ids.HETZJAGD:       return new Hetzjagd(      card, cardGame, State.handCardState, 	Trigger.triggerManualFromHand, State.ignoreState);
			case Ids.VOGELSCHEUCHE:  return new Vogelscheuche( card, cardGame, State.handCardState, 	Trigger.triggerManualFromHand, State.ignoreState);
			case Ids.ALCHEMIE:       return new Alchemie(      card, cardGame, State.boardState, 		Trigger.triggerManualFromHand, State.selectOptionState);

			default: return new CardState(card);
		}
	}
}
